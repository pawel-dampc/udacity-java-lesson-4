public int keepRolling(){
    int dice1=rollDice();
    int dice2=rollDice();
    int count=1;
    while(!(dice1==dice2)){
        //we need to re-roll
        dice1=rollDice();
        dice2=rollDice();
        count=count++;        
    }
    return count;
}

public void riseAlarm (int numOfWarnings){
    int=1;
    while(i<=numOfWarnings){
        System.out.println("Warning!");
        i=i++;
    }
}

public int countBlocks(int levels){
    int total=0;
    for(int i; i<=levels; i++){
        total=total+(i*i);
    }
    return total;
}

public void searchWifi(){
    for(int i=1; i<=10; 1++){
        boolean wifiAvailable=checkWifi();
        if(wifiAvailable){
            System.out.println("Wifi found");
            break;
        }
    }
}


public booleanrollASix(){
    int dice=rollDice();
    while(dice!=6){
        dice=rollDice();
        if(dice==3)
        break
    }
    if (dice==6)
        return true;
    else
        return else
}

public int martingale(){
    int money=1000;
    int target=1200;
    int bet=10;
    while(money>bet){
        boolean win=play();
        if(win){
            money+=bet;
            bet=10;
        }
        else{
            money-=bet;
            bet*=2;
        }
        if(money>=target)
            break;
    }
    return money;
}

public double calculateAverage (double [] temperatures){
    int size = temperatures.length;
    double total = 0;
    for (int i=0; i<size; i++){
        total += temperatures[i];
    }
    double average = total/size;
    return average;
}

public double search(double[] speed){
    int size = speed.length;
    double min = speed[0];
    for (int i=1; i<size; i++){
        if(speed[i]<min){
            min = speed[i];
        }
    }
    return min; 
}

public String findLongestName(String [] names){
    int size = names.length;
    String longestName = names[0];
    for (int i=1; i<size; i++){
        if(names[i].length() > longestName.length()){
            longestName = names[i];
        }
    }
    return longestName;
}

